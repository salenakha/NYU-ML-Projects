"""CIFAR: Final Project.ipynb

Automatically generated by Colab.

"""
import tensorflow as tf
from tensorflow.keras import datasets, layers, models, applications
import matplotlib.pyplot as plt

from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D

import matplotlib.image as mpimg
import time

import numpy as np

"""### Download the CIFAR10 dataset

The CIFAR10 dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them.
"""

# Declaring data

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
Xtrain = train_images
Ytrain = train_labels
Xtest = test_images
Ytest = test_labels

# Scale pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

print("X_train shape", Xtrain.shape)
print("y_train shape", Ytrain.shape)
print("X_test shape", Xtest.shape)
print("y_test shape", Ytest.shape)

# Make labels one-hot representation
train_labels_one_hot = tf.one_hot(train_labels, 10)[:, 0, :]
test_labels_one_hot = tf.one_hot(test_labels, 10)[:, 0, :]

"""### Verify the data

To verify that the dataset looks correct, we will plot the first 25 images from the training set and display the class name below each image.
"""

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    # The CIFAR labels happen to be arrays,
    # which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

"""### Build Model"""

nb_classes = 10 # number of unique digits

# One-hot encoding
Ytrain = to_categorical(Ytrain, nb_classes)
Ytest = to_categorical(Ytest, nb_classes)
print("Y_train shape", Ytrain.shape)
print("Y_test shape", Ytest.shape)

# Format for speed
def image_formatting(image, label):
    # Converting pixel values (uint8) to float32 type
    image = tf.cast(image, tf.float32)
    # Normalizing the data to be in range of -1, +1
    image = applications.resnet_v2.preprocess_input(image)
    image = tf.image.resize(image, (32, 32))
    return image, label

Xtrain, Ytrain = image_formatting(Xtrain, Ytrain)
Xtest, Ytest = image_formatting(Xtest, Ytest)

base_model = applications.ResNet50V2(
    weights='imagenet',  # Load weights pre-trained on the ImageNet dataset
    input_shape=(224, 224, 3),
    include_top=False) # Do not include the classifier at the top

# Build layers
model = models.Sequential([
    layers.Resizing(224, 224),
    base_model,
    layers.GlobalAveragePooling2D(),

    # Add to the model a Dense layer with 256 neurons and ReLu activation
    layers.Dense(128, activation = "relu"),
    layers.Dropout(0.1),
    layers.Dense(32, activation = "relu"),
    layers.Dropout(0.1),
    layers.Dense(32, activation = "relu"),
    layers.Dropout(0.1),
    layers.Dense(10, activation = "softmax"),

    # Do not train the first layer (ResNe(...)t/base_model) of the model as it is already trained
])

model.layers[1].trainable = False

model.build((None, 32, 32, 3))

model.summary()

model.summary()

# Epochs
start = time.time()
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(Xtrain, Ytrain, batch_size=128, epochs=11, validation_data=(Xtest, Ytest), workers=32)
end = time.time()

print('DONE! Time running:', (end-start)/60, 'min')

# Plot progress
plt.figure(figsize=(8,6))
plt.semilogy(history.history['val_accuracy'])
plt.xlabel('Epochs')
plt.ylabel('Val Accuracy')
plt.grid()
